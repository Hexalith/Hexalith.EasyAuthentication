@inject IJSRuntime JSRuntime;
@using System.Security.Claims


<h3>Vous êtes autorisé.</h3>

@if (_user is not null)
{
	if (_user.Identity is not null)
	{
		<p>Mode : @(_inWebAssembly?"Client":"Serveur")</p>
		<p>Authentifié : @_user.Identity.IsAuthenticated</p>
		<p>Nom : @_user.Identity.Name</p>
		<p>Authentication type : @_user.Identity.AuthenticationType</p>
	}
	@if (_user.Claims.Count() > 0)
	{
		<h3>User claims</h3>
		<ul>
			@foreach (var claim in _user.Claims)
			{
				<li>@claim.Type: @claim.Value</li>
			}
		</ul>
	}
}
@code {
	[CascadingParameter]
	private Task<AuthenticationState>? authenticationState { get; set; }

	private string? authMessage;
	private string? surname;
	private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
	private ClaimsPrincipal? _user;
	private bool _inWebAssembly;

	protected override async Task OnInitializedAsync()
	{
		var authState = await authenticationState;
		_user = authState.User;
		_inWebAssembly = (JSRuntime is IJSInProcessRuntime);
		await base.OnInitializedAsync();
	}
}
