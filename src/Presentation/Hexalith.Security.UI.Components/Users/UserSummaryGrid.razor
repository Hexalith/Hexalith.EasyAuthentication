@inject IUserService UserService
@inject NavigationManager NavigationManager
@using Labels = Hexalith.Security.UI.Components.Resources.Users.UserSummaryGrid
<FluentLabel Typo="Typography.Subject">@($"{RendererInfo.Name} {(RendererInfo.IsInteractive?"Interactive":"Static")}")</FluentLabel>
<FluentDataGrid TGridItem="UserSummaryViewModel" Items="@_users?.AsQueryable()" ResizableColumns="true">
	<PropertyColumn Property="@(p => p.Id)" Title="@Labels.Id" />
	<PropertyColumn Property="@(p => p.Name)" Title="@Labels.Name" />
	<PropertyColumn Property="@(p => p.Email)" Title="@Labels.Email" />
	<TemplateColumn Title="Administrator" Align="@Align.Center">
		<FluentCheckbox Disabled="@(_users?.Where(p => p.GlobalAdministrator).Count() < 2 && context.GlobalAdministrator)" Value="@(context.GlobalAdministrator)" CheckStateChanged="@(() => OnGlobalAdministrator(context))" />
	</TemplateColumn>
	<TemplateColumn Title="Disabled" Align="@Align.Center">
		<FluentCheckbox Disabled="@(context.GlobalAdministrator)" Value="@context.Disabled" CheckStateChanged="@(() => OnDisabled(context))" aria-label="Enabled" />
	</TemplateColumn>
	<TemplateColumn Title="Actions" Align="@Align.End">
		<FluentButton aria-label="Edit" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => OnEdit(context))" />
		<FluentButton aria-label="Delete" Disabled="@(context.GlobalAdministrator)" IconEnd="@(new Icons.Regular.Size16.Delete())" Onclick="@(() => OnDelete(context))" />
	</TemplateColumn>
</FluentDataGrid>
@if (_users is null)
{
	<FluentProgressRing />
}


@code {
	private IEnumerable<UserSummaryViewModel>? _users;

	protected override async Task OnInitializedAsync()
	{
		_users = await UserService.GetAllAsync(CancellationToken.None);
		await base.OnInitializedAsync();
	}
	private async Task OnDelete(UserSummaryViewModel context)
	{
		await UserService.DeleteAsync(context.Id, CancellationToken.None);
	}
	private void OnEdit(UserSummaryViewModel context)
	{
		NavigationManager.NavigateTo($"/Security/User/{context.Id}/Edit");
	}
	private async Task OnGlobalAdministrator(UserSummaryViewModel context)
	{
		if (context.GlobalAdministrator)
			await UserService.RemoveGlobalAdministratorAsync(context.Id, CancellationToken.None);
		else
			await UserService.AddGlobalAdministratorAsync(context.Id, CancellationToken.None);
	}
	private async Task OnDisabled(UserSummaryViewModel context)
	{
		if (context.Disabled)
			await UserService.EnableAsync(context.Id, CancellationToken.None);
		else
			await UserService.DisableAsync(context.Id, CancellationToken.None);
		_users = _users!
			.Where(p => p.Id != context.Id)
			.Union([await UserService.GetSummaryAsync(context.Id, CancellationToken.None)])
			.OrderBy(p => p.Name);
	}

}
